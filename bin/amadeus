#!/usr/bin/env php
<?php

namespace Amadeus;

use PharData,
    Phar;

function println($line = "", $stream = null)
{
    $line .= PHP_EOL;

    if (null === $stream) {
        echo $line;
        return;
    }

    fwrite($stream, $line);
}

class Application
{
    const E_CONFIG_MISSING  = 31;
    const E_VERSION_MISSING = 32;
    const E_SOURCE_MISSING  = 33;
    const E_PACKAGE_MISSING = 34;

    protected $commands = array(
        "build",
    );

    protected $argv = array();

    protected $repository;

    protected $config;

    function usage()
    {
        $commands = " - " . join("\n - ", $this->commands);

        return <<<EOF
Usage:
    amadeus <command> [<arguments>]

Available Commands:
$commands
EOF;
    }

    function __invoke()
    {
        $this->argv = $_SERVER["argv"];

        $cmd = @$this->argv[1];
        array_shift($this->argv);
        array_shift($this->argv);

        if (!$cmd) {
            println($this->usage(), STDERR);
            exit(1);
        }

        if (!in_array($cmd, $this->commands)) {
            println("Command $cmd not found.", STDERR);
            println("", STDERR);
            println($this->usage(), STDERR);
            exit(1);
        }

        $this->repository = getcwd();

        if (!is_file("{$this->repository}/amadeus.json")) {
            println("No amadeus.json found in {$this->repository}", STDERR);
            exit(self::E_CONFIG_MISSING);
        }

        $this->config = json_decode(file_get_contents("{$this->repository}/amadeus.json"), true);

        $this->initRepository();

        $this->$cmd();
    }

    function build()
    {
        $usage = "Usage: amadeus build <source_dir> [<version>]";

        if (!$packageDir = @$this->argv[0]) {
            println($usage, STDERR);
            exit(self::E_PACKAGE_MISSING);
        }

        if (!is_file("$packageDir/composer.json")) {
            println("build: composer.json not found in $packageDir", STDERR);
            exit(self::E_PACKAGE_MISSING);
        }

        $packages = array();

        if (is_file("{$this->repository}/public/packages.json")) {
            $packages = json_decode(file_get_contents("{$this->repository}/public/packages.json"), true);
        }

        $package  = json_decode(file_get_contents("$packageDir/composer.json"), true);
        $version  = @$this->argv[1] ?: $package["version"];

        if (!$version) {
            println("You have to specify the version either as argument, or in the composer.json.", STDERR);
            exit(self::E_VERSION_MISSING);
        }

        if (!@$package["source"]) {
            println("You have to specify the \"source\" property in the composer.json,"
                  . " otherwise the package is not installable by composer.", STDERR);
            exit(self::E_SOURCE_MISSING);
        }

        $distFile = "{$package["name"]}-$version.zip";

        $package["dist"] = array(
            "url"  => $this->config["repository_url"] . "/get/$distFile",
            "type" => "zip"
        );

        $package["version"] = $version;

        $this->addPackage($packages, $package);

        if (!is_dir(dirname("{$this->repository}/public/get/$distFile"))) {
            mkdir(dirname("{$this->repository}/public/get/$distFile"), 0777, true);
        }

        if (is_file("{$this->repository}/public/get/$distFile")) {
            unlink("{$this->repository}/public/get/$distFile");
        }

        $distArchive = new PharData("{$this->repository}/public/get/$distFile", 0, "", Phar::ZIP);
        $distArchive->buildFromDirectory($packageDir);

        file_put_contents("{$this->repository}/public/packages.json", json_encode($packages));

        println("Added {$package["name"]} ($version) successfully to repository {$this->repository}");
    }

    function addPackage(&$packages, $package)
    {
        $version = $package["version"];

        if (@$packages[$package["name"]]) {
            $packages[$package["name"]]["versions"][$version] = $package;
        } else {
            $packages[$package["name"]] = array(
                "name" => $package["name"],
                "description" => $package["description"],
                "versions" => array(
                    $version => $package
                )
            );
        }
    }

    function initRepository()
    {
        !is_dir("{$this->repository}/public")     and mkdir("{$this->repository}/public", 0777, true);
        !is_dir("{$this->repository}/public/get") and mkdir("{$this->repository}/public/get", 0777, true);
    }
}

$app = new Application;
$app();
